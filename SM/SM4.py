import math

# 2进制转16进制
def BtoH(text):
    text = str(text)
    while len(text)<32:
        text = '0' + text
    text_16 = ''
    for i in range(len(text)//4):
        tmp = hex(int(text[4*i:4*(i+1)],base = 2))[2:]
        text_16 = text_16 + tmp
    return text_16

# 16进制转2进制
def HtoB(text):
    text_2 = ''
    text = str(text)
    for ch in text:
        tmp = bin(int(ch ,base = 16))[2:]
        for i in range(4):
            if len(tmp)%4!=0:
                tmp = '0' + tmp
        text_2 = text_2 + tmp   
    while len(text_2)<32:
        text_2 = '0' + text_2      
    return text_2

# 按位异或
def Xor(a,b):
    result =''
    if len(a)!=len(b):
        print('len(a)!=len(b)')
        return False
    for i in range(len(a)):
        if a[i]==b[i]:
            result += '0'
        else:
            result += '1'
    return result

# 三变量按位异或运算
def Xor3(a,b,c):
    return Xor(Xor(a,b),c)

# 循环左移函数
def LeftRotate(text, num):
    text = str(text)
    return (text[num:] + text[:num])

# s-box对应函数
def tao(b):
    Sbox = {
        0x00: 0xD6, 0x01: 0x90, 0x02: 0xE9, 0x03: 0xFE,
        0x04: 0xCC, 0x05: 0xE1, 0x06: 0x3D, 0x07: 0xB7,
        0x08: 0x16, 0x09: 0xB6, 0x0A: 0x14, 0x0B: 0xC2,
        0x0C: 0x28, 0x0D: 0xFB, 0x0E: 0x2C, 0x0F: 0x05,

        0x10: 0x2B, 0x11: 0x67, 0x12: 0x9A, 0x13: 0x76,
        0x14: 0x2A, 0x15: 0xBE, 0x16: 0x04, 0x17: 0xC3,
        0x18: 0xAA, 0x19: 0x44, 0x1A: 0x13, 0x1B: 0x26,
        0x1C: 0x49, 0x1D: 0x86, 0x1E: 0x06, 0x1F: 0x99,

        0x20: 0x9C, 0x21: 0x42, 0x22: 0x50, 0x23: 0xF4,
        0x24: 0x91, 0x25: 0xEF, 0x26: 0x98, 0x27: 0x7A,
        0x28: 0x33, 0x29: 0x54, 0x2A: 0x0B, 0x2B: 0x43,
        0x2C: 0xED, 0x2D: 0xCF, 0x2E: 0xAC, 0x2F: 0x62,

        0x30: 0xE4, 0x31: 0xB3, 0x32: 0x1C, 0x33: 0xA9,
        0x34: 0xC9, 0x35: 0x08, 0x36: 0xE8, 0x37: 0x95,
        0x38: 0x80, 0x39: 0xDF, 0x3A: 0x94, 0x3B: 0xFA,
        0x3C: 0x75, 0x3D: 0x8F, 0x3E: 0x3F, 0x3F: 0xA6,

        0x40: 0x47, 0x41: 0x07, 0x42: 0xA7, 0x43: 0xFC,
        0x44: 0xF3, 0x45: 0x73, 0x46: 0x17, 0x47: 0xBA,
        0x48: 0x83, 0x49: 0x59, 0x4A: 0x3C, 0x4B: 0x19,
        0x4C: 0xE6, 0x4D: 0x85, 0x4E: 0x4F, 0x4F: 0xA8,

        0x50: 0x68, 0x51: 0x6B, 0x52: 0x81, 0x53: 0xB2,
        0x54: 0x71, 0x55: 0x64, 0x56: 0xDA, 0x57: 0x8B,
        0x58: 0xF8, 0x59: 0xEB, 0x5A: 0x0F, 0x5B: 0x4B,
        0x5C: 0x70, 0x5D: 0x56, 0x5E: 0x9D, 0x5F: 0x35,

        0x60: 0x1E, 0x61: 0x24, 0x62: 0x0E, 0x63: 0x5E,
        0x64: 0x63, 0x65: 0x58, 0x66: 0xD1, 0x67: 0xA2,
        0x68: 0x25, 0x69: 0x22, 0x6A: 0x7C, 0x6B: 0x3B,
        0x6C: 0x01, 0x6D: 0x21, 0x6E: 0x78, 0x6F: 0x87,

        0x70: 0xD4, 0x71: 0x00, 0x72: 0x46, 0x73: 0x57,
        0x74: 0x9F, 0x75: 0xD3, 0x76: 0x27, 0x77: 0x52,
        0x78: 0x4C, 0x79: 0x36, 0x7A: 0x02, 0x7B: 0xE7,
        0x7C: 0xA0, 0x7D: 0xC4, 0x7E: 0xC8, 0x7F: 0x9E,

        0x80: 0xEA, 0x81: 0xBF, 0x82: 0x8A, 0x83: 0xD2,
        0x84: 0x40, 0x85: 0xC7, 0x86: 0x38, 0x87: 0xB5,
        0x88: 0xA3, 0x89: 0xF7, 0x8A: 0xF2, 0x8B: 0xCE,
        0x8C: 0xF9, 0x8D: 0x61, 0x8E: 0x15, 0x8F: 0xA1,

        0x90: 0xE0, 0x91: 0xAE, 0x92: 0x5D, 0x93: 0xA4,
        0x94: 0x9B, 0x95: 0x34, 0x96: 0x1A, 0x97: 0x55,
        0x98: 0xAD, 0x99: 0x93, 0x9A: 0x32, 0x9B: 0x30,
        0x9C: 0xF5, 0x9D: 0x8C, 0x9E: 0xB1, 0x9F: 0xE3,

        0xA0: 0x1D, 0xA1: 0xF6, 0xA2: 0xE2, 0xA3: 0x2E,
        0xA4: 0x82, 0xA5: 0x66, 0xA6: 0xCA, 0xA7: 0x60,
        0xA8: 0xC0, 0xA9: 0x29, 0xAA: 0x23, 0xAB: 0xAB,
        0xAC: 0x0D, 0xAD: 0x53, 0xAE: 0x4E, 0xAF: 0x6F,

        0xB0: 0xD5, 0xB1: 0xDB, 0xB2: 0x37, 0xB3: 0x45,
        0xB4: 0xDE, 0xB5: 0xFD, 0xB6: 0x8E, 0xB7: 0x2F,
        0xB8: 0x03, 0xB9: 0xFF, 0xBA: 0x6A, 0xBB: 0x72,
        0xBC: 0x6D, 0xBD: 0x6C, 0xBE: 0x5B, 0xBF: 0x51,

        0xC0: 0x8D, 0xC1: 0x1B, 0xC2: 0xAF, 0xC3: 0x92,
        0xC4: 0xBB, 0xC5: 0xDD, 0xC6: 0xBC, 0xC7: 0x7F,
        0xC8: 0x11, 0xC9: 0xD9, 0xCA: 0x5C, 0xCB: 0x41,
        0xCC: 0x1F, 0xCD: 0x10, 0xCE: 0x5A, 0xCF: 0xD8,

        0xD0: 0x0A, 0xD1: 0xC1, 0xD2: 0x31, 0xD3: 0x88,
        0xD4: 0xA5, 0xD5: 0xCD, 0xD6: 0x7B, 0xD7: 0xBD,
        0xD8: 0x2D, 0xD9: 0x74, 0xDA: 0xD0, 0xDB: 0x12,
        0xDC: 0xB8, 0xDD: 0xE5, 0xDE: 0xB4, 0xDF: 0xB0,

        0xE0: 0x89, 0xE1: 0x69, 0xE2: 0x97, 0xE3: 0x4A,
        0xE4: 0x0C, 0xE5: 0x96, 0xE6: 0x77, 0xE7: 0x7E,
        0xE8: 0x65, 0xE9: 0xB9, 0xEA: 0xF1, 0xEB: 0x09,
        0xEC: 0xC5, 0xED: 0x6E, 0xEE: 0xC6, 0xEF: 0x84,

        0xF0: 0x18, 0xF1: 0xF0, 0xF2: 0x7D, 0xF3: 0xEC,
        0xF4: 0x3A, 0xF5: 0xDC, 0xF6: 0x4D, 0xF7: 0x20,
        0xF8: 0x79, 0xF9: 0xEE, 0xFA: 0x5F, 0xFB: 0x3E,
        0xFC: 0xD7, 0xFD: 0xCB, 0xFE: 0x39, 0xFF: 0x48
    }
    a = []
    for i in range(4):
        a.append(b[i*8:(i+1)*8])
    res = ''
    for i in range(4):
        index = hex(int(str(a[i]),base=2))
        tmp = hex(Sbox[int(index,base=16)])[2:]
        res += tmp
    return HtoB(res)

# 合成置换T中的L
def L(b):
    return Xor(Xor(Xor(Xor(b,LeftRotate(b,2)),LeftRotate(b,10)),LeftRotate(b,18)),LeftRotate(b,24))

# 密钥扩展中的L'
def LL(b):
    return Xor3(b,LeftRotate(b,13),LeftRotate(b,23))

# 合成置换T
def T(b):
    return L(tao(b))

# 密钥扩展中的T'
def TT(b):
    return LL(tao(b))

# 轮函数F
def F(x0,x1,x2,x3,rk):
    return Xor(x0,T( Xor(Xor3(x1,x2,x3), rk)))

# 密钥扩展
def Key_Expand(key_2):
    key_2 = HtoB(key)
    FK = ['A3B1BAC6','56AA3350','677D9197','B27022DC']
    CK = ['00070E15','1C232A31','383F464D','545B6269','70777E85','8C939AA1','A8AFB6BD','C4CBD2D9','E0E7EEF5','FC030A11','181F262D','343B4249','50575E65','6C737A81','888F969D','A4ABB2B9','C0C7CED5','DCE3EAF1','F8FF060D','141B2229','30373E45','4C535A61','686F767D','848B9299','A0A7AEB5','BCC3CAD1','D8DFE6ED','F4FB0209','10171E25','2C333A41','484F565D','646B7279']
    K=[]
    for i in range(4):
        K.append(Xor(key_2[i*32:(i+1)*32],HtoB(FK[i])))
    rk=[]
    for i in range(32):
        rk.append( Xor( K[i], TT( Xor( Xor3(K[i+1],K[i+2],K[i+3]), HtoB(CK[i]) ) ) ) )
        K.append(rk[i])
        #print("rk[",i,']',BtoH(rk[i]))
    return rk

def SM4_encrypt(inputX,rk):
    X = inputX
    for i in range(32):
        X.append(F(X[i],X[i+1],X[i+2],X[i+3],rk[i]))
        #print('X[',i+4,']',BtoH(X[i+4]))
    res = ''
    for i in range(4):
        res += X[35-i]
    return BtoH(res)

def SM4_decrypt(inputX,rk):
    X = inputX
    for i in range(32):
        X.append(F(X[i],X[i+1],X[i+2],X[i+3],rk[31-i]))
    res = ''
    for i in range(4):
        res += X[35-i]
    return BtoH(res)

# 消息字符串转比特串
def msg2bit(msg):
    res = ''
    for c in msg:
        a = ord(c)
        res += bin(a)[2:].zfill(8)
    return res    

# 比特串转消息字符串
def bit2msg(b):
    res = ''
    for i in range(int(len(b)/8)):
        cbit = b[i*8:(i+1)*8]
        res += chr(int(cbit,base=2))
    return res

# 字符消息转成128bit分组
def get_msggroup(plaintext):
    plaintext_2 = msg2bit(plaintext)  # 转为2进制比特串
    group_num = math.ceil(len(plaintext_2)/128)  # 求出分组组数
    msg_group = []

    # 对于前group_num-1个分组，必定是128位，直接添加到分组消息中
    for i in range(group_num-1):
        msg_group.append(plaintext_2[0:128])
        plaintext_2 = plaintext_2[128:]

    remain_len = len(plaintext_2)  # 获得最后一个消息分组的长度（可能不足128bit）
    # 如果最后一个消息分组是128bit，则直接添加
    if(remain_len==128):
        msg_group.append(plaintext_2)
        msg_group.append(''.zfill(128))  # 在消息分组结尾添加一个全0分组，标识最后一个分组原本为128位
    
    # 如果最后一个消息分组不足128bit，则根据它的二进制串第一位，填充与之相反的0/1在前，补足128位
    else:
        if(plaintext_2[0]=='1'):
            plaintext_2 = plaintext_2.zfill(128-remain_len)
        else:
            for i in range(128-remain_len):
                plaintext_2 = '1' + plaintext_2
        msg_group.append(plaintext_2)
        # 在消息分组结尾添加一个全1分组，标识最后一个分组原本不足128位，含有填充字符
        msg_group.append('11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111')
    return msg_group

if __name__ == "__main__":
    
    # 明文
    plaintext = 'SM4 Algorithm developed by ZhangYanran'
    print('明文为：',plaintext)
    # 加密密钥
    key = '0123456789abcdeffedcba9876543210'
    print('加解密密钥为：', key)
    rk = Key_Expand(key)  # 密钥扩展

    # 获得明文分组
    msg_group = get_msggroup(plaintext)

    # SM4加密
    cipher_text = []
    for msg in msg_group:
        X = []
        for i in range(4):
            X.append(msg[i*32:(i+1)*32])
        encryption = SM4_encrypt(X,rk)
        cipher_text.append(encryption)
    print('加密密文分组为：\n',cipher_text)

    # SM4解密
    decrypt_text = []
    for cphtext in cipher_text:
        # 获得密文分组
        Y = []
        cph_2 = HtoB(cphtext)
        for i in range(4):
            Y.append(cph_2[i*32:(i+1)*32])
        decryption = SM4_decrypt(Y,rk)
        decrypt_text.append(decryption)
    print('解密密文分组为：\n',decrypt_text)

    # 解密密文分组
    res = ''
    for i in range(len(decrypt_text)-2):
        dcptext_2 = HtoB(decrypt_text[i])
        res += bit2msg(dcptext_2)
    if(decrypt_text[len(decrypt_text)-1]==''.zfill(128)):
        res += bit2msg(decrypt_text[len(decrypt_text)-2])
    else:
        laststr = HtoB(decrypt_text[len(decrypt_text)-2])
        plug_char = laststr[0]
        index = 0
        while(laststr[index]==plug_char):
            index += 1
        res += bit2msg(laststr[index:])
    print('解密得到：',res)
        